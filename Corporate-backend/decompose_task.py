# decompose_task.py
from query_handler import query, init_llm
import pandas as pd

# def decompose_task(task, n, thread_id, assistant_id, data_introduction):
#     prompt = f"""
#     任务描述：【{task}】
#     数据概述：{data_introduction}

#     基于提供的任务描述和数据概述，评估是否需要对任务进行分解。分解任务应当基于任务的复杂性和数据的特性进行：
    
#     - 如果任务可以通过简单的可视化解决（例如，寻找极值、基本的趋势线），则不用分解。但要给出子任务名称、子任务内容以及评分，保证格式统一。
#     - 对于需要深入分析的复杂任务，如涉及多个变量的比较分析、关联性分析或涉及复杂计算的时间序列分析，请进行详细的任务分解。

#     任务分解要求：
#     1. 将主任务分解为最多三个子任务。
#     2. 对每个子任务，提供以下信息：
#        - 子任务名称：清晰定义子任务的目标。
#        - 子任务内容：详细描述子任务的分析方法和所需数据。
#        - 评分：根据子任务的难度和对总任务完成的贡献，给出1到10的评分。

#     请按以下格式展示每个子任务的信息，确保输出的一致性和可读性：
#     ### 子任务名称
#     - **内容**：子任务的详细描述。
#     - **评分**：子任务的难度评分。

#     注意：在此阶段，你只需设计和规划子任务，不需要实际执行数据分析。
#     """
#     record = query(prompt, thread_id, assistant_id)
#     return record

def decompose_task(task, n, thread_id, assistant_id, data_introduction):
    prompt = f"""
    任务描述：【{task}】
    数据概述：{data_introduction}

    基于提供的任务描述和数据概述，评估是否需要对任务进行分解。分解任务应当基于任务的复杂性和数据的特性进行：

    - 如果任务相对简单，可以通过简单的可视化解决（例如，寻找极值、基本的趋势线），则应该按照以下格式呈现为单一子任务以保持输出格式的一致性：
    ### 维持原任务：分析企业的盈利能力
    - **内容**：简单描述如何通过可视化技术分析企业盈利能力。
    - **评分**：6

    - 如果任务复杂，需要深入分析，如涉及多个变量的比较分析、关联性分析或涉及复杂计算的时间序列分析，则应按照以下格式进行详细的任务分解：
    任务分解要求：
    1. 将主任务分解为最多三个子任务。
    2. 对每个子任务，提供以下信息：
       - **子任务名称**：清晰定义子任务的目标。
       - **内容**：详细描述子任务的分析方法和所需数据。
       - **评分**：根据子任务的难度和对总任务完成的贡献，给出1到10的评分。

    示例输出：
    ### 子任务一：分析企业的负债情况
    - **内容**：分析和比较不同时间点的负债数据，以评估企业的偿债能力。
    - **评分**：7

    请按以下格式展示每个子任务的信息，确保输出的一致性和可读性：
    ### 子任务名称
    - **内容**：子任务的详细描述。
    - **评分**：子任务的难度评分。

    注意：在此阶段，你只需设计和规划子任务，不需要实际执行数据分析。
    """
    record = query(prompt, thread_id, assistant_id)
    return record
